const express = require('express'); // Express 모듈을 불러옴
const fetch = require('node-fetch'); // node-fetch 모듈을 불러옴
const cors = require('cors'); // CORS 모듈을 불러옴
const app = express(); // Express 애플리케이션 생성

app.use(cors()); // 모든 요청에 CORS 허용

// 네이버 API 클라이언트 ID 및 시크릿 설정
const CLIENT_ID = 'mc8mm4oocr';
const CLIENT_SECRET = 'EfFXgIK8QJG4nz84uNKgyTbeP8RhvpxOHPu9f4yl';

// '/search' 경로에 대한 GET 요청 처리
app.get('/search', async (req, res) => {
    const keyword = req.query.keyword; // 요청 쿼리에서 키워드 추출
    const api_url = `https://openapi.naver.com/v1/search/local.json?query=${encodeURIComponent(keyword)}&display=1`; // 네이버 API 요청 URL
    
    try 
    {
        // 네이버 API에 GET 요청 보내기
        const response = await fetch(api_url, 
        {
            method: 'GET',
            headers: 
            {
                'X-Naver-Client-Id': CLIENT_ID, // 클라이언트 ID 헤더 설정
                'X-Naver-Client-Secret': CLIENT_SECRET // 클라이언트 시크릿 헤더 설정
            }
        });

        // 응답이 성공적이지 않은 경우
        if (!response.ok) 
        {
            const errorText = await response.text(); // 오류 메시지 텍스트 추출
            console.error('Naver API error response:', errorText); // 오류 메시지 콘솔 출력
            res.status(response.status).json({ error: errorText }); // 클라이언트에 오류 응답 전송
            return;
        }

        const data = await response.json(); // 응답 데이터를 JSON으로 파싱
        res.json(data); // 클라이언트에 JSON 데이터 전송

    } 
    catch (error) 
    {
        console.error('Fetch error:', error); // 오류 메시지 콘솔 출력
        res.status(500).json({ error: error.message }); // 클라이언트에 오류 메시지 전송
    }
});

// 서버를 3000번 포트에서 실행
app.listen(3000, () => { console.log('Proxy server is running on http://localhost:3000/search'); }); // 서버 실행 메시지 출력 